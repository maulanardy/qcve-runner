/**
 * @name Quantum-related vulnerabilities in Bitcoin Core
 * @description Detects potential quantum-related vulnerabilities in Bitcoin Core
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import javascript
import semmle.javascript.Assertions

from CryptoRandomLibrary import *
from OpenSSLLibrary import *

// Define the CWE tags for each type of vulnerability
let cwe_rsa_key_generation = "CWE-326: Inadequate Encryption Strength"
let cwe_rsa_encryption = "CWE-327: Use of a Broken or Risky Cryptographic Algorithm"
let cwe_unsafe_random = "CWE-330: Use of Insufficiently Random Values"

// Find all RSA key generation operations that use a small key size
// and use them to encrypt or decrypt data
let small_key_size = 2048
let rsa_key_operations = findRSAKeyGeneration(small_key_size)
let rsa_encryption_operations = findRSAEncryption(rsa_key_operations)
let rsa_decryption_operations = findRSADecryption(rsa_key_operations)

// Find all uses of the unsafe `Math.random` function and its variants
let unsafe_math_random = findUnsafeMathRandom()

// Combine the two sets of results to find all potentially vulnerable operations
let potentially_vulnerable_operations = rsa_encryption_operations + rsa_decryption_operations + unsafe_math_random

// Create a map of CWE tags for each type of vulnerability
let cwe_map = { rsa_key_operations: cwe_rsa_key_generation, rsa_encryption_operations: cwe_rsa_encryption, unsafe_math_random: cwe_unsafe_random }

// Output the results in a format that includes CWE tags for each type of vulnerability
report("Potential quantum-related vulnerabilities",
  [
    { "description": "RSA key generation with small key size", "results": rsa_key_operations, "cwe": cwe_rsa_key_generation },
    { "description": "RSA encryption with small key size", "results": rsa_encryption_operations, "cwe": cwe_rsa_encryption },
    { "description": "RSA decryption with small key size", "results": rsa_decryption_operations, "cwe": cwe_rsa_encryption },
    { "description": "Use of unsafe Math.random", "results": unsafe_math_random, "cwe": cwe_unsafe_random }
  ],
  potentially_vulnerable_operations,
  (operation, result, cwe) => {
    result.addTag(cwe)
  }
)
